tenets:
  - name: counter-not-incremented
    actions:
      codelingo/docs:
        title: Counter Not Incremented
        body: |
          When writing a `for` or `while` loop, it is important to increment or decrement a counter to avoid
          an infinte loop occuring.

          ## Bad code
          ```golang
          // Countdown will countdown for 10 seconds
          func Countdown() {
            i := 10
            for i > 0 {
              fmt.Println(i)
              time.Sleep(time.Second)
            }
            fmt.Println("Countdown Complete")
          }
          ```

          ## Good code
          ```golang
          // Countdown will countdown for 10 seconds
          func Countdown() {
            i := 10
            for i > 0 {
              fmt.Println(i)
              time.Sleep(time.Second)
              i = i - 1
            }
            fmt.Println("Countdown Complete")
          }
          ```
      codelingo/review:
        comment: Increment or decrement a counter when using a `for` loop to avoid an infinite loop.
    query: |
      import codelingo/ast/go

      go.func_decl(depth = any):
        any_of:
          go.assign_stmt(depth = any):
            go.lhs:
              go.ident:
                name as counterName
            go.rhs:
              any_of:
                go.basic_lit:
                  kind == "int"
                go.basic_lit:
                  kind == "float"
          go.decl_stmt(depth = any):
            go.gen_decl:
              go.value_spec:
                go.names:
                  go.ident:
                    name as counterName
                any_of:
                  go.ident:
                    name == "int"
                  go.ident:
                    name == "int8"
                  go.ident:
                    name == "int16"
                  go.ident:
                    name == "int32"
                  go.ident:
                    name == "int64"
                  go.ident:
                    name == "uint"
                  go.ident:
                    name == "uint8"
                  go.ident:
                    name == "uint16"
                  go.ident:
                    name == "uint32"
                  go.ident:
                    name == "uint64"
                  go.ident:
                    name == "float32"
                  go.ident:
                    name == "float64"
        @review comment
        go.for_stmt(depth = any):
          go.binary_expr:
            go.ident:
              name == counterName
          exclude:
            go.inc_dec_stmt(depth = any):
              name == counterName
