funcs:
  - name: compareFunc
    type: asserter
    body: |
      function (a, b) {
        return a < b;
      }
  - name: threeComparison
    type : asserter
    body: |
      function (a, b, c){
        return (a < b) && (a > c);
      }
tenets:
  - name: check-reader-bytes-before-err
    actions:
      codelingo/docs:
        title: Check Reader Bytes Before `err`
        body: |
          When `Read` encounters an error or end-of-file (EOF) condition, it will return the number
          of specified bytes read and the error encountered. It is Go convention to always process the
          bytes returned before considering the error `err`. Doing this correctly will handle I/O errors
          that may happen after reading the bytes and also both of the allowed EOF behaviors.

          ## Bad code
          ```golang
          // PrintFile reads a file up to the expected 6 bytes and prints the output
          func PrintFile(filename string) error {
            file, err := os.Open(filename)
            if err != nil {
              return err
            }
            defer file.Close()

            for {
              buff := make([]byte, 6)
              n, err := file.Read(buff)
              if err != nil {
                switch err {
                case io.EOF:
                  return nil
                default:
                  return err
                }
              }

              if n > 0 {
                fmt.Println("read", n, "bytes:", string(buff)) // bytes returned checked after err
              }
            }
          }
          ```

          ## Good code 
          ```golang
          // PrintFile reads a file up to the expected 6 bytes and prints the output
          func PrintFile(filename string) error {
            file, err := os.Open(filename)
            if err != nil {
              return err
            }
            defer file.Close()

            for {
              buff := make([]byte, 6)
              n, err := file.Read(buff)
              if n > 0 {
                fmt.Println("read", n, "bytes:", string(buff)) // bytes returned checked before err
              }

              if err != nil {
                switch err {
                case io.EOF:
                  return nil
                default:
                  return err
                }
              }
            }
          }
          ```
      codelingo/review:
        comment: Check io.Reader bytes read (and process) before checking `err`. 
        From [effective go](https://golang.org/pkg/io/#Reader)/
    query: |
      import codelingo/ast/go

      go.block_stmt(depth = any):
        go.list:
          go.assign_stmt:
            sibling_order as so1
            go.lhs:
              go.ident:
                name == "err"
            go.rhs:
              go.call_expr:
                go.selector_expr:
                  go.ident:
                    name == "Read"
                go.args:
                  go.ident:
                    name as x
          @review comment
          go.if_stmt:
            sibling_order as so2
            compareFunc(so1, so2)
            go.binary_expr:
              go.ident:
                name == "err"
          exclude:
            go.expr_stmt:
              sibling_order as so3
              threeComparison(so3, so2, so1)
              go.call_expr:
                go.args: 
                  go.call_expr:
                    go.args:
                      go.ident:
                        name == x