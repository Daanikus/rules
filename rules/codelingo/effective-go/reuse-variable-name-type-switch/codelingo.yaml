funcs:
  - name: notEqual
    type: asserter
    body: |
      function(name1, name2) {
        return name1 != name2
      }

tenets:
  - name: reuse-variable-name-type-switch
    actions:
      codelingo/docs:
        title: Reuse Variable Name in a Type Switch
        body: |
          If the switch declares a variable in the expression, 
          the variable will have the corresponding type in each clause. 
          It's also idiomatic to reuse the name in such cases, in effect 
          declaring a new variable with the same name but a different 
          type in each case.

          ## Bad code
          ```golang
          // Print prints a different statement for int, string or default input types
          func Print(i interface{}) {
              switch v := i.(type) {
              case int:
                fmt.Printf("Twice %v is %v\n", v, v*2)
              case string:
                fmt.Printf("%q is %v bytes long\n", v, len(v))
              default:
                fmt.Printf("I don't know about type %T!\n", v)
              }
          }
          ```

          ## Good code
          ```golang
          // Print prints a different statement for int, string or default input types
          func Print(i interface{}) {
              switch i := i.(type) { // <-- reuse of variable i here.
              case int:
                fmt.Printf("Twice %v is %v\n", i, i*2)
              case string:
                fmt.Printf("%q is %v bytes long\n", i, len(i))
              default:
                fmt.Printf("I don't know about type %T!\n", i)
              }
          }
          ```
      codelingo/review:
        comment: Reuse `{{varName2}}` instead of a new variable `{{varName1}}` in the type switch. 
        From [Effective Go](https://golang.org/doc/effective_go.html#type_switch).
      codelingo/rewrite:
    query: |
      import codelingo/ast/go
      
      @review comment
      go.type_switch_stmt(depth = any):
        go.assign_stmt:
          go.lhs: 
            go.ident:
              name as varName1
          go.rhs:
            go.type_assert_expr:
              go.ident:
                name as varName2
                notEqual(varName1, varName2)
