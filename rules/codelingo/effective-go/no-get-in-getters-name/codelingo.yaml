funcs:
  - name: hasGet
    type: asserter
    body: |
      function(name) {
        return name.substring(0,3) === "Get"
      }

  - name: fixName
    type: resolver
    body: |
      function(name) {
        return name.charAt(0).toUpperCase() + name.substring(1)
      }

tenets:
  - name: no-get-in-getters-name
    actions:
      codelingo/docs:
        title: Getters Don't Need a "Get" Prefix
        body: |
          It is not necessary to include "Get" in a getter method's name. The Go convention is to use the same name as the underlying field, but capitalized to export.
          
          ## Bad code
          ```golang
          // GetHeight returns the height of a rectangle. 
          func (r *rect) GetHeight() int {
              return r.height
          }
          ```

          ## Good code
          ```golang
          // Height returns the height of a rectangle. 
          func (r *rect) Height() int {
              return r.height
          }
          ```
      codelingo/review:
        comment: Do not use Get at the start of `{{methodName}}`, use `{{fixName(varName)}}` instead 
        [as specified in Effective Go](https://golang.org/doc/effective_go.html#Getters) 
      codelingo/rewrite:
    query: |
      import codelingo/ast/go

      @review comment
      go.func_decl(depth = any):     
        go.field_list
        go.ident:
          name as methodName
          hasGet(methodName)
        go.block_stmt:
          go.list:
            go.return_stmt:
              go.results:
                go.selector_expr:
                  go.ident:
                    sibling_order == 1
                    name as varName
