funcs:
  - name: containsInvalidUnderscores
    type: asserter
    body: |
      function(name) {
        if (name.length === 1) {
          return false
        }

        var location = name.indexOf("_")
        if (location === -1) {
          return false
        }

        // Underscores are valid if they're in-between two digits
        var digits = '0123456789'
        return digits.indexOf(name.charAt(location + 1)) === -1 || digits.indexOf(name.charAt(location - 1)) === -1
      }
  - name: isNotProto
    type: asserter
    body: |
      function(name) {
        return name.indexOf(".pb.go") === -1
      }
tenets:
  - name: underscores-in-name
    actions:
      codelingo/docs:
        title: Avoid Underscores in Names
        body: |
          When writing a name (such as a function, interface and variable name etc), it is best to 
          avoid using underscores to differentiate between words. The convention in Go is to use 
          MixedCaps or mixedCaps rather than underscores to write multiword names.
          For example, use DownloadFile() rather than Download_File().

          ## Bad code
          ```golang
          // Add_Int returns the sum of two integers 
          func Add_Int(x, y int) int {
            return x + y
          }
          ```

          ```        
          ## Good code
          ```golang
          // AddInt returns the sum of two integers
          func AddInt(x int, y int) int {
            return x + y
          }
          ```
      codelingo/review:
        comment: Use MixedCaps or mixedCaps rather than underscores to write multiword names. From [Effective Go](https://golang.org/doc/effective_go.html#mixed-caps).
    query: |
      import codelingo/ast/go
      go.file(depth = any):
        filename as fName
        # Ignore generated .pb.go files
        isNotProto(fName)
        @review comment
        go.ident(depth = any):
          name as varName
          containsInvalidUnderscores(varName)
