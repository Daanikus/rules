funcs:
  - name: isGreater
    type: asserter
    body: |
      function(name1, name2) {
        return name1 > name2
      }

tenets:
  - name: unnecessary-else 
    actions:
      codelingo/docs:
        title: Unnecessary Else 
        body: |
           When an `if` statement doesn't flow into the next statement, it is Go
           convention to not include an `else` statement. For instance, if the
           `if` statement ends in a break, continue, goto or return, then the
           `else` statement is omitted.

           ## Bad code 
           ```golang
           // FileCheck checks whether a specific file exists or is in a directory
            func FileCheck(filename string) bool {
              info, err := os.Stat(filename)
              if os.IsNotExist(err) {
                return false
              } else {
                fmt.Println("File descriptor exists. Checking whether descriptor is a directory") // Unnecessary else statement
              }
              return !info.IsDir()
            }
           ```

           ## Good code 
           ```golang
           // FileCheck checks whether a specific file exists or is in a directory
            func FileCheck(filename string) bool {
              info, err := os.Stat(filename)
              if os.IsNotExist(err) {
                return false
              }
              return !info.IsDir()
            }
           ```
      codelingo/review:
        comment: Omit unnecessary else when `if` doesn't flow into the next statement. [as specified in Effective Go](https://golang.org/doc/effective_go.html#control-structures) 
      codelingo/rewrite:
    query: |
      import codelingo/ast/go
      
      
      go.if_stmt(depth = any):
        go.block_stmt:
          sibling_order as sb1
          go.list:
            any_of:
              go.return_stmt
              go.branch_stmt:
                tok == "break"
              go.branch_stmt:
                tok == "goto"
              go.branch_stmt:
                tok == "continue"
        @review comment
        go.block_stmt:
          sibling_order as sb2
          isGreater(sb2, sb1)
