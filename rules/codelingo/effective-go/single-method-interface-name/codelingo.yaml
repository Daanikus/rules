funcs:
  - name: isBadName
    type: asserter
    body: |
      function(ifName, methodName) {
        return methodName.toLowerCase() !== ifName.toLowerCase().substring(0, methodName.length)
      }
tenets:
  - name: single-method-interface-name
    actions:
      codelingo/docs:
        title: Single Method Interface Name
        body: |
          By convention, interfaces with one method are named by the method name plus an `-er` suffix. 
          For example: `Reader`, `Writer`, `Formatter`, `CloseNotifier` etc.
          Methods named `Read`, `Write`, `Close`, `Flush`, `String` and so on have canonical 
          signatures and meanings and it's best to honor them and the function names they capture. 
          To avoid confusion, don't give your method one of those names unless it has the same 
          signature and meaning. Conversely, if your type implements a method with the same meaning 
          as a method on a well-known type, give it the same name and signature; call 
          your string-converter method `String` not `ToString`.

          ## Bad code
          ```golang
          // WebClient contains a basic Download method which downloads a file. 
          type WebClient interface {
            Download() []byte
          } 
          ```

          ## Good code
          ```golang
          // Downloader contains a basic Download method which downloads a file.
          type Downloader interface {
            Download() []byte
          }
          ```
      codelingo/review:
        comment: |
          If an interface contains only one method, the method name should appear 
          at the beginning of the interface name. From [effective go](https://golang.org/doc/effective_go.html#interface-names).
    query: |
      import codelingo/ast/go
      
      go.gen_decl(depth = any):
        go.type_spec:
          go.ident:
            name as ifName
          @review comment
          go.interface_type:
            go.field_list:
              child_count == 1
              go.field:
                go.names:
                  go.ident:
                    name as methodName
                    isBadName(ifName, methodName)

